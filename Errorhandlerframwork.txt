/*
* Author       : K Bhargav
* Created Date : 8 Aug 2023
* Description  : ErrorHandler Framework
* LastModified : 9 Aug 2023
* ModifiedBy          ModifiedDate        ModifiedMethod
* Arun.Asadi			14 Aug 2023			ALL
*/ 


public class OCSC_HandleCustomException extends Exception {
    public static Boolean LogException(list<Exception> excs, Id userID)
    {
        list<OCSC_ErrorHandling__c> exceptions = new list<OCSC_ErrorHandling__c>();
        for(Exception e : excs){            
            String stackTrace = e.getStackTraceString().substringBefore('\n');
            String className = stackTrace.substringAfter('.').substringBefore('.');	
            String methodName = stackTrace.substringBefore(':').substringAfter(className).substringAfter('.');
            String recId = e.getMessage().substringAfter('id ').substringBefore(';');
            
            //Governer Limit of executingQuery 
            String QueryLimit = OCSC_ConstantHelper.QueryLimitMsg + Limits.getQueries() + '/' + Limits.getLimitQueries();
            String DMLimit = OCSC_ConstantHelper.DMLimitMsg + Limits.getDmlRows() + '/' + Limits.getLimitDmlRows();
            String DMLStat = OCSC_ConstantHelper.DMLStatMsg +  Limits.getDmlStatements() + '/' + Limits.getLimitDmlStatements();   
            String CPUT = OCSC_ConstantHelper.CPUTMsg+ Limits.getCpuTime() + '/' + Limits.getLimitCpuTime();
            //Log information in object
            OCSC_ErrorHandling__c exc = new OCSC_ErrorHandling__c();
            exc.Govt_Limit_in_Executing_Code__c = String.format('{0}\n{1}\n{2}\n{3}',new List<string>{QueryLimit, DMLimit,DMLStat,CPUT});
            exc.Errro_message__c = e.getMessage();
            exc.Exception_Type__c = e.getTypeName();
            exc.Line_Number__c = e.getLineNumber();
            exc.StackTrace__c = e.getStackTraceString();
            exc.Method__c = methodName;
            exc.Class__c=className;
            exc.LoggedInUser__c = userID;
            if(recId != ''){
                exc.Record_ID__c = recId;	
                exc.Object__c =  getObjectAPIName(recId);
            }
            exceptions.add(exc);
        }  
        try{
            database.insert(exceptions); 
            return True;           
        }catch(Exception ex){  
            System.debug(ex.getMessage());
            return False;
        }finally{
            return False;
        }  
    } 
    
    
    public static Boolean LogException(Exception e, Id userID, String statuscode, string class_name, string method_name)
    {
        String recId = e.getMessage().substringAfter('id ').substringBefore(';'); 

        OCSC_ErrorHandling__c exc = new OCSC_ErrorHandling__c();
        exc.Errro_message__c = e.getMessage();
        exc.Exception_Type__c = e.getTypeName();
        exc.Line_Number__c = e.getLineNumber();
        exc.Method__c = method_name;
        exc.Class__c = class_name;
        exc.LoggedInUser__c = userID;
        if(recId != ''){
            exc.Record_ID__c = recId;	
            exc.Object__c =  getObjectAPIName(recId);
        }
        exc.Status_Code__c = statuscode;            
        try{
            database.insert(exc); 
            return True;           
        }catch(Exception ex){  
            System.debug(ex.getMessage());
            return False;
        }
        finally{
            return False;
        }  
        
    } 


	public static Boolean LogException(String error_message, String exce_type, Integer line_Number, Id userID, String statuscode, string class_name, string method_name)
    { 
        OCSC_ErrorHandling__c exc = new OCSC_ErrorHandling__c();
        exc.Errro_message__c = error_message;
        exc.Exception_Type__c = exce_type;
        exc.Line_Number__c = line_Number;
        exc.Method__c = method_name;
        exc.Class__c = class_name;
        exc.LoggedInUser__c = userID;           
        try{
            database.insert(exc); 
            return True;           
        }catch(Exception ex){  
            System.debug(ex.getMessage());
            return False;
        }
        finally{
            return False;
        }  
        
    } 
    
    
    public static String getObjectAPIName(String recordId) {
        String keyPrefix = recordId.substring(0, 3);
        
        if (recordId == null) {
            return null;
        }
        Map<String, Schema.SObjectType> globalDescribe = Schema.getGlobalDescribe();
        
        for (Schema.SObjectType objType : globalDescribe.values()) {
            if (objType.getDescribe().getKeyPrefix() == keyPrefix) {
                return objType.getDescribe().getName();
            }
        }
        return '';
    }
    
}

